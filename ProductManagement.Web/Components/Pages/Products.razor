@* ðŸ“¦ Products Management - Where inventory meets innovation! May your products multiply like rabbits and your profits like compound interest! ðŸ“¦ *@
@page "/products"
@using ProductManagement.Models
@using ProductManagement.Web.Services
@using System.ComponentModel.DataAnnotations
@inject IProductApiClient ProductApiClient
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Products - ProductHub</PageTitle>

<div class="products-header">
    <div class="container-fluid">
        <div class="row align-items-center">
            <div class="col">
                <div class="d-flex align-items-center">
                    <div class="header-icon">
                        <i class="bi bi-box-seam-fill"></i>
                    </div>
                    <div>
                        <h1 class="display-5 fw-bold mb-0 text-white">Product Management</h1>
                        <p class="lead mb-0 text-white-50">Manage your products with full CRUD operations powered by modern tech stack</p>
                    </div>
                </div>
            </div>
            <div class="col-auto">
                <button class="btn btn-light btn-lg shadow-lg px-4 py-3 rounded-pill" @onclick="ShowCreateModal">
                    <i class="bi bi-plus-circle me-2"></i> Add New Product
                </button>
            </div>
        </div>
    </div>
</div>

<div class="products-content">
    <div class="container-fluid">
    @if (loading)
    {
        <div class="text-center p-5">
            <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-3 fs-5">Loading products...</p>
        </div>
    }
    else if (products?.Any() == true)
    {
        <div class="row g-4">
            @foreach (var product in products)
            {
                <div class="col-md-6 col-xl-4 mb-4">
                    <div class="product-card h-100">
                        <div class="card-body p-4">
                            <div class="d-flex justify-content-between align-items-start mb-3">
                                <h5 class="card-title fw-bold mb-0">@product.Name</h5>
                                <span class="badge bg-success fs-6">$@product.Price.ToString("F2")</span>
                            </div>
                            <p class="card-text text-muted mb-3">@product.Description</p>
                            <p class="card-text mb-0">
                                <small class="text-muted">
                                    <i class="bi bi-calendar3 me-1"></i>
                                    Created: @product.CreatedAt.ToString("MMM dd, yyyy")
                                </small>
                            </p>
                        </div>
                        <div class="card-footer bg-transparent border-0 p-4 pt-0">
                            <div class="d-grid gap-2 d-md-flex">
                                <button class="btn btn-outline-primary flex-fill" @onclick="() => ShowEditModal(product)">
                                    <i class="bi bi-pencil me-1"></i> Edit
                                </button>
                                <button class="btn btn-outline-danger flex-fill" @onclick="() => DeleteProduct(product.Id)">
                                    <i class="bi bi-trash me-1"></i> Delete
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="empty-state text-center p-5">
            <div class="empty-icon mb-4">
                <i class="bi bi-box-seam display-1"></i>
            </div>
            <h3 class="mb-3">No Products Found</h3>
            <p class="text-muted mb-4">Get started by adding your first product to your inventory.</p>
            <button class="btn btn-primary btn-lg px-4 py-3 rounded-pill" @onclick="ShowCreateModal">
                <i class="bi bi-plus-circle me-2"></i> Add Your First Product
            </button>
        </div>
    }
    </div>
</div>

<!-- Create/Edit Modal -->
<div class="modal fade @(showModal ? "show" : "")" style="display: @(showModal ? "block" : "none")" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@(isEditing ? "Edit Product" : "Create New Product")</h5>
                <button type="button" class="btn-close" @onclick="HideModal"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="@productForm" OnValidSubmit="@SubmitForm">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" />

                    <div class="mb-3">
                        <label for="name" class="form-label">Name</label>
                        <InputText id="name" class="form-control" @bind-Value="productForm.Name" />
                        <ValidationMessage For="@(() => productForm.Name)" />
                    </div>

                    <div class="mb-3">
                        <label for="price" class="form-label">Price</label>
                        <InputNumber id="price" class="form-control" @bind-Value="productForm.Price" />
                        <ValidationMessage For="@(() => productForm.Price)" />
                    </div>

                    <div class="mb-3">
                        <label for="description" class="form-label">Description</label>
                        <InputTextArea id="description" class="form-control" rows="3" @bind-Value="productForm.Description" />
                        <ValidationMessage For="@(() => productForm.Description)" />
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="HideModal">Cancel</button>
                        <button type="submit" class="btn btn-primary" disabled="@submitting">
                            @if (submitting)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            }
                            @(isEditing ? "Update Product" : "Create Product")
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@if (showModal)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<Product>? products;
    private bool loading = true;
    private bool showModal = false;
    private bool isEditing = false;
    private bool submitting = false;
    private int editingProductId;
    private ProductFormModel productForm = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        loading = true;
        try
        {
            var result = await ProductApiClient.GetAllAsync();
            products = result.ToList();
        }
        catch (ApplicationException ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading products: {ex.Message}");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", "An unexpected error occurred while loading products. Please try again later.");
            Console.WriteLine($"Unexpected error loading products: {ex}");
        }
        finally
        {
            loading = false;
        }
    }

    private void ShowCreateModal()
    {
        isEditing = false;
        productForm = new ProductFormModel();
        showModal = true;
    }

    private void ShowEditModal(Product product)
    {
        isEditing = true;
        editingProductId = product.Id;
        productForm = new ProductFormModel
        {
            Name = product.Name,
            Price = product.Price,
            Description = product.Description
        };
        showModal = true;
    }

    private void HideModal()
    {
        showModal = false;
        submitting = false;
    }

    private async Task SubmitForm()
    {
        submitting = true;
        try
        {
            if (isEditing)
            {
                var updateRequest = new UpdateProductRequest
                {
                    Name = productForm.Name.Trim(),
                    Price = productForm.Price,
                    Description = productForm.Description?.Trim() ?? string.Empty
                };
                
                var updatedProduct = await ProductApiClient.UpdateAsync(editingProductId, updateRequest);
                if (updatedProduct == null)
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Product not found or could not be updated.");
                    HideModal();
                    await LoadProducts();
                    return;
                }
            }
            else
            {
                var createRequest = new CreateProductRequest
                {
                    Name = productForm.Name.Trim(),
                    Price = productForm.Price,
                    Description = productForm.Description?.Trim() ?? string.Empty
                };
                await ProductApiClient.CreateAsync(createRequest);
            }

            HideModal();
            await LoadProducts();
        }
        catch (ApplicationException ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error saving product: {ex.Message}");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", "An unexpected error occurred while saving the product. Please try again.");
            Console.WriteLine($"Unexpected error saving product: {ex}");
        }
        finally
        {
            submitting = false;
        }
    }

    private async Task DeleteProduct(int productId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this product?");
        if (confirmed)
        {
            try
            {
                var deleted = await ProductApiClient.DeleteAsync(productId);
                if (!deleted)
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Product not found or could not be deleted.");
                }
                await LoadProducts();
            }
            catch (ApplicationException ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error deleting product: {ex.Message}");
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", "An unexpected error occurred while deleting the product. Please try again.");
                Console.WriteLine($"Unexpected error deleting product: {ex}");
            }
        }
    }

    public class ProductFormModel
    {
        [Required(ErrorMessage = "Product name is required")]
        [StringLength(100, ErrorMessage = "Product name cannot exceed 100 characters")]
        [RegularExpression(@"^[a-zA-Z0-9\s\-_.]+$", ErrorMessage = "Product name contains invalid characters")]
        public string Name { get; set; } = "";

        [Required(ErrorMessage = "Price is required")]
        [Range(0.01, 999999.99, ErrorMessage = "Price must be between $0.01 and $999,999.99")]
        public decimal Price { get; set; }

        [StringLength(500, ErrorMessage = "Description cannot exceed 500 characters")]
        public string Description { get; set; } = "";
    }
}

<style>
    .products-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 3rem 0;
        margin-bottom: 2rem;
        position: relative;
        overflow: hidden;
    }
    
    .products-header::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="dots" width="20" height="20" patternUnits="userSpaceOnUse"><circle cx="10" cy="10" r="1" fill="white" opacity="0.1"/></pattern></defs><rect width="100" height="100" fill="url(%23dots)"/></svg>');
        pointer-events: none;
    }
    
    .header-icon {
        width: 4rem;
        height: 4rem;
        background: rgba(255, 255, 255, 0.2);
        border-radius: 1rem;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-right: 1.5rem;
        font-size: 1.5rem;
        color: white;
        backdrop-filter: blur(10px);
    }
    
    .products-content {
        padding: 0 0 3rem 0;
    }
    
    .product-card {
        background: white;
        border: 1px solid rgba(0,0,0,0.08);
        border-radius: 1rem;
        box-shadow: 0 4px 20px rgba(0,0,0,0.08);
        transition: all 0.3s ease;
        overflow: hidden;
    }
    
    .product-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 30px rgba(0,0,0,0.15);
        border-color: rgba(102, 126, 234, 0.2);
    }
    
    .product-card .card-title {
        color: #2d3748;
        font-size: 1.25rem;
    }
    
    .product-card .badge {
        font-size: 0.875rem;
        padding: 0.5rem 1rem;
        border-radius: 2rem;
    }
    
    .empty-state {
        background: linear-gradient(135deg, #f7fafc 0%, #edf2f7 100%);
        border-radius: 1rem;
        margin: 2rem 0;
    }
    
    .empty-icon {
        color: #a0aec0;
        opacity: 0.7;
    }
    
    .btn-primary {
        background: linear-gradient(45deg, #667eea, #764ba2);
        border: none;
        transition: all 0.3s ease;
    }
    
    .btn-primary:hover {
        background: linear-gradient(45deg, #5a67d8, #6b46a4);
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
    }
    
    .btn-light {
        background: rgba(255, 255, 255, 0.95);
        color: #667eea;
        border: none;
        transition: all 0.3s ease;
        backdrop-filter: blur(10px);
    }
    
    .btn-light:hover {
        background: white;
        color: #5a67d8;
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(255, 255, 255, 0.3);
    }
    
    .modal-content {
        border: none;
        border-radius: 1rem;
        box-shadow: 0 20px 60px rgba(0,0,0,0.2);
    }
    
    .modal-header {
        background: linear-gradient(45deg, #667eea, #764ba2);
        color: white;
        border-radius: 1rem 1rem 0 0;
        border-bottom: none;
    }
    
    .modal-header .btn-close {
        filter: invert(1);
    }
    
    .form-control:focus {
        border-color: #667eea;
        box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
    }
</style>
